ClickHouse.Driver.ADO.ClickHouseDataSource
ClickHouse.Driver.ADO.ClickHouseDataSource.ClickHouseDataSource(string connectionString, System.Net.Http.HttpClient httpClient = null, bool disposeHttpClient = true) -> void
ClickHouse.Driver.ADO.ClickHouseDataSource.ClickHouseDataSource(string connectionString, System.Net.Http.IHttpClientFactory httpClientFactory, string httpClientName = "") -> void
ClickHouse.Driver.ADO.ClickHouseDataSource.CreateConnection() -> ClickHouse.Driver.ADO.ClickHouseConnection
ClickHouse.Driver.ADO.ClickHouseDataSource.Logger.get -> Microsoft.Extensions.Logging.ILogger
ClickHouse.Driver.ADO.ClickHouseDataSource.Logger.set -> void
ClickHouse.Driver.ADO.ClickHouseDataSource.OpenConnection() -> ClickHouse.Driver.ADO.ClickHouseConnection
ClickHouse.Driver.ADO.ClickHouseDataSource.OpenConnectionAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<ClickHouse.Driver.ADO.ClickHouseConnection>
ClickHouse.Driver.ADO.Readers.ClickHouseDataReader.GetTuple(int ordinal) -> System.Runtime.CompilerServices.ITuple
ClickHouse.Driver.IClickHouseDataSource
ClickHouse.Driver.IClickHouseDataSource.ConnectionString.get -> string
ClickHouse.Driver.IClickHouseDataSource.CreateConnection() -> ClickHouse.Driver.IClickHouseConnection
ClickHouse.Driver.IClickHouseDataSource.OpenConnection() -> ClickHouse.Driver.IClickHouseConnection
ClickHouse.Driver.IClickHouseDataSource.OpenConnectionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<ClickHouse.Driver.IClickHouseConnection>
override ClickHouse.Driver.ADO.ClickHouseConnectionFactory.CreateDataSource(string connectionString) -> System.Data.Common.DbDataSource
override ClickHouse.Driver.ADO.ClickHouseDataSource.ConnectionString.get -> string
static readonly ClickHouse.Driver.Types.DateTimeConversions.DateOnlyEpochStart -> System.DateOnly
static Microsoft.Extensions.DependencyInjection.ClickHouseServiceCollectionExtensions.AddClickHouseDataSource(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string connectionString, System.Net.Http.IHttpClientFactory httpClientFactory, string httpClientName = "", Microsoft.Extensions.DependencyInjection.ServiceLifetime connectionLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient, Microsoft.Extensions.DependencyInjection.ServiceLifetime dataSourceLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton, object serviceKey = null) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Microsoft.Extensions.DependencyInjection.ClickHouseServiceCollectionExtensions.AddClickHouseDataSource(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string connectionString, System.Net.Http.HttpClient httpClient = null, Microsoft.Extensions.DependencyInjection.ServiceLifetime connectionLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient, Microsoft.Extensions.DependencyInjection.ServiceLifetime dataSourceLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton, object serviceKey = null) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Microsoft.Extensions.DependencyInjection.ClickHouseServiceCollectionExtensions.AddClickHouseDataSource(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Func<System.IServiceProvider, object, ClickHouse.Driver.ADO.ClickHouseDataSource> dataSourceFactory, Microsoft.Extensions.DependencyInjection.ServiceLifetime connectionLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient, Microsoft.Extensions.DependencyInjection.ServiceLifetime dataSourceLifetime = Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton, object serviceKey = null) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
